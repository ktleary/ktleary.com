{"version":3,"sources":["components/header.js","components/profile-links.js","components/about.js","App.js","serviceWorker.js","index.js"],"names":["TitleContainer","styled","div","Title","h1","TimeDisplay","Header","ts","date","Date","month","getMonth","day","getDate","year","getFullYear","hour","getHours","min","getMinutes","getTimestamp","ProfileLinksContainer","ProfileLink","a","hoverColor","SlashStyle","span","linkData","name","url","color","generateLinks","map","link","i","key","href","length","ProfileLinks","AboutContainer","changeBackground","document","body","classList","toggle","AboutText","textColor","About","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"m/BAGA,IAAMA,EAAiBC,IAAOC,IAAV,KASdC,EAAQF,IAAOG,GAAV,KAWLC,EAAcJ,IAAOC,IAAV,KAsBF,SAASI,IACtB,IAAMC,EAZR,WACE,IAAMC,EAAO,IAAIC,KACXC,EAAQF,EAAKG,WAAa,EAC1BC,EAAMJ,EAAKK,UACXC,EAAON,EAAKO,cACZC,EAAOR,EAAKS,WACZC,EAAMV,EAAKW,aAEjB,MAAM,GAAN,OAAUL,GAAV,OAAiBJ,GAAjB,OAAyBE,GAAzB,OAA+BI,GAA/B,OAAsCE,GAI3BE,GACX,OACE,kBAACpB,EAAD,KACE,kBAACG,EAAD,gBACA,kBAACE,EAAD,KAAcE,I,qgBC/CpB,IAAMc,EAAwBpB,IAAOC,IAAV,KAIrBoB,EAAcrB,IAAOsB,EAAV,KAOJ,qBAAGC,YAA+B,8BAMzCC,EAAaxB,IAAOyB,KAAV,KAOVC,EAAW,CACf,CAAEC,KAAM,SAAUC,IAAK,6BAA8BC,MAAO,WAC5D,CAAEF,KAAM,UAAWC,IAAK,6BAA8BC,MAAO,WAC7D,CAAEF,KAAM,UAAWC,IAAK,2BAA4BC,MAAO,YAG7D,SAASC,IACP,OAAOJ,EAASK,KAAI,SAACC,EAAMC,GAAP,OAClB,0BAAMC,IAAKF,EAAKJ,KACd,kBAACP,EAAD,CAAac,KAAMH,EAAKJ,IAAKL,WAAYS,EAAKH,OAC3CG,EAAKL,MAEPM,EAAIP,EAASU,OAAS,EAdT,kBAACZ,EAAD,kBAcuB,SAK5B,SAASa,IACtB,OAAO,kBAACjB,EAAD,KAAwBU,K,oUC1CjC,IAAMQ,EAAiBtC,IAAOC,IAAV,KAOpB,SAASsC,IACPC,SAASC,KAAKC,UAAUC,OAAO,YAGjC,IAAMC,EAAY5C,IAAOC,IAAV,KACJ,qBAAG4C,WAA6B,+BAQ5B,SAASC,IACtB,OACE,kBAACR,EAAD,KACE,kBAACM,EAAD,oCACA,kBAACA,EAAD,wCACA,kBAACA,EAAD,CAAWC,UApBG,UAoBqBE,QAASR,GAA5C,uB,MCZSS,MAVf,WACE,OACE,6BACE,kBAAC3C,EAAD,MACA,kBAACgC,EAAD,MACA,kBAACS,EAAD,QCCcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.27f5faea.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst TitleContainer = styled.div`\n  display: flex;\n  margin: 36px 40px 18px 36px;\n  padding: 0;\n  height: 46px;\n  line-height: 46px;\n  vertical-align: middle;\n`\n\nconst Title = styled.h1`\n  font-family: 'Roboto Mono';\n  font-style: normal;\n  font-weight: normal;\n  font-size: 46px;\n  line-height: 46px;\n  height: 46px;\n  padding: 0;\n  margin: 0;\n  color: rgba(255, 255, 255, 0.9);\n`\nconst TimeDisplay = styled.div`\n  display: none;\n  font-family: 'Roboto Mono';\n  font-style: normal;\n  font-weight: normal;\n  font-size: 16px;\n  color: rgba(255, 255, 255, 0.24);\n  vertical-align: bottom;\n  margin-left: 16px;\n  padding-top: 5px;\n`\nfunction getTimestamp() {\n  const date = new Date()\n  const month = date.getMonth() + 1\n  const day = date.getDate()\n  const year = date.getFullYear()\n  const hour = date.getHours()\n  const min = date.getMinutes()\n\n  return `${year}${month}${day}${hour}${min}`\n}\n\nexport default function Header() {\n  const ts = getTimestamp()\n  return (\n    <TitleContainer>\n      <Title>ktleary</Title>\n      <TimeDisplay>{ts}</TimeDisplay>\n    </TitleContainer>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst ProfileLinksContainer = styled.div`\n  margin: 18px 40px;\n`\n\nconst ProfileLink = styled.a`\n  font-family: 'Roboto Mono';\n  text-decoration: none;\n  font-size: 3vh;\n  color: rgba(255, 255, 255, 0.6);\n  transition: color 2s, font-weight 2s, transform 1s;\n  &:hover {\n    color: ${({ hoverColor }) => hoverColor || 'rgba(255, 255, 255, 0.6)'};\n\n    font-weight: 600;\n  }\n`\n\nconst SlashStyle = styled.span`\n  font-size: 3vh;\n  color: rgba(255, 255, 255, 0.6);\n`\n\nconst slash = () => <SlashStyle>&nbsp;/&nbsp;</SlashStyle>\n\nconst linkData = [\n  { name: 'Github', url: 'https://github.com/ktleary', color: '#2196f3' },\n  { name: 'Profile', url: 'https://angel.co/u/ktleary', color: '#ffeb3b' },\n  { name: 'Contact', url: 'mailto:kevin@ktleary.com', color: '#4caf50' },\n]\n\nfunction generateLinks() {\n  return linkData.map((link, i) => (\n    <span key={link.url}>\n      <ProfileLink href={link.url} hoverColor={link.color}>\n        {link.name}\n      </ProfileLink>\n      {i < linkData.length - 1 ? slash() : null}\n    </span>\n  ))\n}\n\nexport default function ProfileLinks() {\n  return <ProfileLinksContainer>{generateLinks()}</ProfileLinksContainer>\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst AboutContainer = styled.div`\n  margin: 10vh 8px 0 8px;\n  color: rgba(255, 255, 255, 0.78);\n`\n\nconst changeColor = '#ff8a65'\n\nfunction changeBackground() {\n  document.body.classList.toggle('animated')\n}\n\nconst AboutText = styled.div`\n  color: ${({ textColor }) => textColor || 'rgba(255, 255, 255, 0.78)'};\n  font-family: sans-serif;\n  text-align: center;\n  font-size: 5vw;\n  margin: 4px 0;\n  padding: 0;\n`\n\nexport default function About() {\n  return (\n    <AboutContainer>\n      <AboutText>I build innovative software</AboutText>\n      <AboutText>for companies and organizations</AboutText>\n      <AboutText textColor={changeColor} onClick={changeBackground}>\n        changing the world\n      </AboutText>\n    </AboutContainer>\n  )\n}\n","import React from 'react'\nimport Header from './components/header'\nimport ProfileLinks from './components/profile-links'\nimport About from './components/about'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <ProfileLinks />\n      <About />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}